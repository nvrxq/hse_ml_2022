# -*- coding: utf-8 -*-
"""kirichenko_hw2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w5HnPg8NlMbU8BqN1wTM_VCkDdO4Wcw5

### Машинное Обучения

## Домашнее задание №2 - Дерево решений

**Общая информация**

**Срок сдачи:** 1 февраля 2023, 08:30   
**Штраф за опоздание:** -2 балла за каждые 2 дня опоздания

Решений залить в свой github репозиторий.

Используйте данный Ipython Notebook при оформлении домашнего задания.

##  Реализуем дерево решений (3 балла)

Допишите недостающие части дерева решений. Ваша реализация дерева должна работать по точности не хуже DecisionTreeClassifier из sklearn.
Внимание: если Вас не устраивает предложенная структура хранения дерева, Вы без потери баллов можете сделать свой класс MyDecisionTreeClassifier, в котором сами полностью воспроизведете алгоритм дерева решений. Обязательно в нем иметь только функции fit, predict . (Но название класса не менять)
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from sklearn.datasets import load_wine
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import KFold, train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier
import warnings
warnings.filterwarnings("ignore")

from collections import defaultdict

class MyDecisionTreeClassifier:
    NON_LEAF_TYPE = 0
    LEAF_TYPE = 1

    def __init__(self, min_samples_split=2, max_depth=5, criterion='entropy', faster = False):
        """
        criterion -- критерий расщепления. необходимо релизовать три:
        Ошибка классификации, Индекс Джини, Энтропийный критерий
        max_depth -- максимальная глубина дерева
        min_samples_split -- минимальное число объектов в листе, чтобы сделать новый сплит
        """
        self.min_samples_split = min_samples_split
        self.max_depth = max_depth
        self.num_class = -1
        # Для последнего задания
        self.feature_importances_ = None
        criterions = {'gini' : self.__gini,
                          'entropy' : self.__entropy,
                           'misclass': self.__misclass}  
        self.criterion = criterions[criterion]
        # Структура, которая описывает дерево
        # Представляет словарь, где для  node_id (айдишник узла дерева) храним
        # (тип_узла, айдишник признака сплита, порог сплита) если тип NON_LEAF_TYPE
        # (тип_узла, предсказание класса, вероятность класса) если тип LEAF_TYPE
        # Подразумевается, что у каждого node_id в дереве слева 
        # узел с айди 2 * node_id + 1, а справа 2 * node_id + 2
        self.tree = dict()
        self.faster = faster

    def __div_samples(self, x, y, feature_id, threshold):
        """
        Разделяет объекты на 2 множества
        x -- матрица объектов
        y -- вектор ответов
        feature_id -- айдишник признака, по которому делаем сплит
        threshold -- порог, по которому делаем сплит
        """
        left_mask = x[:, feature_id] > threshold
        right_mask = ~left_mask
        return x[left_mask], x[right_mask], y[left_mask], y[right_mask]

    def __misclass(self, y):
        prob = np.bincount(y)/y.shape
        return 1 - np.max(prob)


    def __entropy(self, y):
        # prob mojet bit' 0, poetomu +1e-10
        prob = np.bincount(y)/y.shape
        return -(prob * np.log(prob + 1e-10)).sum()


    def __gini(self, y):
        p = np.bincount(y)/y.shape
        if not p.shape[0]:
            return 1
        return (p* (1 - p)).sum()


    def __ma(self, x, window = 2):
      return np.convolve(x, np.ones(window), 'valid') / window




    def __find_thresholdBrootForce(self, x, y):
        best_feature, best_Q, best_threshold = -1, -1, -1
        obj, features = x.shape
        for feature in range(features):
          cols = x[:, feature]
          cols = self.__ma(cols)
          for value in cols:
            x_l, x_r, y_l, y_r = self.__div_samples(x, y, feature, value)
            if y_l.shape[0]:
              Q = self.criterion(y) - (y_l.shape[0] / y.shape[0]) * self.criterion(y_l) - (y_r.shape[0] / y.shape[0]) * self.criterion(y_r)
              
              if Q > best_Q:
                best_Q = Q
                best_feature = feature
                best_threshold = value
        return best_feature, best_threshold
    

    def __sort_samples(self, x ,y ):
        sorted_args = x.argsort()
        return x[sorted_args], y[sorted_args]


    def __fast_entropy(self, leftCounts,leftS , rightCounts, rightS):
         p1 = leftS * (-((leftCounts / leftS) * np.log( (leftCounts + 1e-10)/ leftS)).sum(axis = 1)).reshape(-1, 1)
         p2 = rightS * (-((rightCounts / rightS) * np.log(
               (rightCounts + 1e-10)/ rightS)).sum(axis = 1)).reshape(-1, 1)
         return (p1 + p2) / (leftS + rightS)





      


    def __find_threshold(self, x, y):


        x_sort, y_sort = self.__sort_samples(x, y)
        split_cut = self.min_samples_split
        y_split = y_sort
        #обрезаем вектор ответов
        if split_cut:
            y_split = y_sort[split_cut:-split_cut]
        class_bound = np.where(y_split[:-1] != y_split[1:])[0] + (split_cut + 1)

        if len(class_bound) == 0:
            return np.inf, None

        eq_el_count = class_bound - np.append([split_cut], class_bound[:-1])
        OneHotMatrix = np.zeros((class_bound.shape[0], self.num_class))
        OneHotMatrix[np.arange(class_bound.shape[0]), y_sort[class_bound - 1]] = 1
        classInc = OneHotMatrix * eq_el_count.reshape(-1, 1)
        classInc[0] = classInc[0] + np.bincount(y_sort[:split_cut], minlength = self.num_class)

        l_c = np.cumsum(classInc, axis=0)
        r_c = np.bincount(y_sort, minlength = self.num_class) - l_c
        l_s = class_bound.reshape(l_c.shape[0], 1)
        r_s = y_sort.shape[0] - l_s
        Q = self.__fast_entropy(l_c, l_s, r_c, r_s)
        #Т.к H для всех элементов не зависит от вектора, => задача максимизации превращается в задачу минимизации
        feature = np.argmin(Q)
        left_el_id = l_s[feature][0]
        #Возвращаем Movind Average с окном 2
        return Q[feature], (x_sort[left_el_id - 1] + x_sort[left_el_id]) / 2.0




       

    def checkLeaf(self, y, depth):
        return (self.max_depth <= depth) or \
               (y.size < self.min_samples_split)

    def __fit_node(self, x, y, node_id, depth):
        if self.checkLeaf(y, depth):
            self.tree[node_id] = [self.__class__.LEAF_TYPE, np.argmax(np.bincount(y))]
        else:
            if self.faster:
              thresholds = np.array([self.__find_threshold(x[:, i], y)
                                    for i in range(x.shape[1])])
              best_feature = np.argmin(thresholds[:, 0])
              best_threshold = thresholds[best_feature, 1]
            else:
              best_feature, best_threshold = self.__find_thresholdBrootForce(x, y)
            if best_threshold == None:
                self.tree[node_id] = [self.__class__.LEAF_TYPE, np.argmax(np.bincount(y))]
            else:
                l_x, r_x, l_y, r_y = self.__div_samples(x, y, best_feature, best_threshold)

                if (l_x.size == 0) or (r_x.size == 0):
                    self.tree[node_id] = [self.__class__.LEAF_TYPE, np.argmax(np.bincount(y))]
                else:
                    self.tree[node_id] = [self.__class__.NON_LEAF_TYPE, best_feature, best_threshold]
                    self.__fit_node(l_x, l_y, 2 * node_id + 1, depth + 1)
                    self.__fit_node(r_x, r_y, 2 * node_id + 2, depth + 1)
                    l_s = np.array(l_y.size)
                    r_s = np.array(r_y.size)
                    c = -np.sum(np.unique(y, return_counts=True)[1] *
                                    np.log2(np.unique(y, return_counts=True)[1])) / y.size
                    l_count = -np.sum(np.unique(l_y, return_counts=True)[1] *
                                      np.log2(np.unique(l_y, return_counts=True)[1])) / l_y.size
                    r_count = -np.sum(np.unique(r_y, return_counts=True)[1] *
                                      np.log2(np.unique(r_y, return_counts=True)[1])) / r_y.size
                    self.feature_importances_[best_feature] += y.size * c - l_y.size * l_count - l_y.size * r_count


    
    def fit(self, x, y):
        """
        Рекурсивно строим дерево решений
        Начинаем с корня node_id 0
        """
        self.num_class = np.unique(y).size
        self.feature_importances_ = np.zeros(x.shape[1])
        self.__fit_node(x, y, 0, 0) 
        self.feature_importances_ /= np.sum(self.feature_importances_)
    def __predict_class(self, x, node_id):
        """
        Рекурсивно обходим дерево по всем узлам,
        пока не дойдем до терминального
        """
        node = self.tree[node_id]
        if node[0] == self.__class__.NON_LEAF_TYPE:
            _, feature_id, threshold = node
            if x[feature_id] >= threshold:
                return self.__predict_class(x, 2 * node_id + 1)
            else:
                return self.__predict_class(x, 2 * node_id + 2)
        else:
            return node[1]
        
    def predict(self, X):
        """
        Вызывает predict для всех объектов из матрицы X
        """
        return np.array([self.__predict_class(x, 0) for x in X])
    
    def fit_predict(self, x_train, y_train, predicted_x):
        self.fit(x_train, y_train)
        return self.predict(predicted_x)
    
    def get_feature_importance(self):
        """
        Возвращает важность признаков
        """
        # Ваш код здесь
        return self.feature_importances_

my_clf = MyDecisionTreeClassifier(min_samples_split=2, max_depth = 3, faster = True)
clf = DecisionTreeClassifier(min_samples_split=2)

wine = load_wine()
X_train, X_test, y_train, y_test = train_test_split(wine.data, wine.target, test_size=0.1, stratify=wine.target, random_state = 42)

my_clf.fit(X_train, y_train)

accuracy_score(my_clf.predict(X_test), y_test)

"""Совет: Проверьте, что ваша реализация корректно работает с признаками в которых встречаются повторы. 
И подумайте, какие еще граничные случаи могут быть.
Например, проверьте, что на таком примере ваша модель корректно работает:
"""

X = np.array([[1] * 10, [0, 1, 2, 5, 6, 3, 4, 7, 8, 9]]).T
y = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1])
for depth in range(1, 5):
    my_clf = MyDecisionTreeClassifier(max_depth=depth, faster = False)
    my_clf.fit(X, y)
    print("DEPTH:", depth, "\n\t\tTree:", my_clf.tree, my_clf.predict(X))

"""### Придумайте интересные примеры для отладки дерева решений (доп. задание)
Это необязательный пункт. За него можно получить 1 доп балл. 
Можете придумать примеры для отладки дерева, похожие на пример выше. 

Они должны быть не сложные, но в то же время информативные, чтобы можно было понять, что реализация содержит ошибки.
Вместе с примером нужно указать ожидаемый выход модели. 
"""

my_clf = MyDecisionTreeClassifier(min_samples_split=2, faster = False)
clf = DecisionTreeClassifier(min_samples_split=2)

"""## Ускоряем дерево решений (2 балла)
Добиться скорости работы на fit не медленнее чем в 10 раз sklearn на данных wine. 
Для этого используем numpy.
"""

# Commented out IPython magic to ensure Python compatibility.
# %time clf.fit(X_train, y_train)

# Commented out IPython magic to ensure Python compatibility.
# %time my_clf.fit(X_train, y_train) #  faster = False

my_clf = MyDecisionTreeClassifier(min_samples_split=2, faster = True)

# Commented out IPython magic to ensure Python compatibility.
# %time my_clf.fit(X_train, y_train) #  faster = True

"""## Боевое применение (3 балла)

На практике Вы познакомились с датасетом Speed Dating Data. В нем каждая пара в быстрых свиданиях характеризуется определенным набором признаков. Задача -- предсказать, произойдет ли матч пары (колонка match). 

Данные и описания колонок во вложениях.

Пример работы с датасетом можете найти в практике пункт 2
https://github.com/VVVikulin/ml1.sphere/blob/master/2019-09/lecture_06/pract-trees.ipynb

Либо воспользоваться функцией:
"""

def preprocess_spd_data(df):
    df = df.iloc[:, :97]
    
    to_drop = [
        'iid', 'id', 'idg', 'condtn', 'round', 'position', 'positin1', 'order', 'partner', 
        'age_o', 'race_o', 'pf_o_att', 'pf_o_sin', 'pf_o_int', 'pf_o_fun', 'pf_o_amb', 'pf_o_sha',
        'dec_o', 'attr_o', 'sinc_o', 'intel_o', 'fun_o', 'amb_o', 'shar_o', 'like_o', 'prob_o','met_o',
        'field', 'undergra', 'from', 'zipcode', 'income', 'career', 'sports', 'tvsports', 'exercise', 
        'dining', 'museums', 'art', 'hiking', 'gaming', 'clubbing', 'reading', 'tv', 'theater', 'movies', 
        'concerts', 'music', 'shopping', 'yoga', 'expnum',
        'mn_sat', 'tuition'
    ]

    df = df.drop(to_drop, axis=1)
    df = df.dropna(subset=['age', 'imprelig', 'imprace', 'date'])

    df.loc[:, 'field_cd'] = df.loc[:, 'field_cd'].fillna(19)
    df.loc[:, 'career_c'] = df.loc[:, 'career_c'].fillna(18)
    
    # attr1 processing
    df.loc[:, 'temp_totalsum'] = df.loc[:, ['attr1_1', 'sinc1_1', 'intel1_1', 'fun1_1', 
                                            'amb1_1', 'shar1_1']].sum(axis=1)
    df.loc[:, ['attr1_1', 'sinc1_1', 'intel1_1', 'fun1_1', 'amb1_1', 'shar1_1']] =\
    (df.loc[:, ['attr1_1', 'sinc1_1', 'intel1_1', 'fun1_1', 'amb1_1', 'shar1_1']].T / 
     df.loc[:, 'temp_totalsum'].T).T * 100
    
    # attr2 processing
    df.loc[:, 'temp_totalsum'] = df.loc[:, ['attr2_1', 'sinc2_1', 'intel2_1', 'fun2_1', 
                                            'amb2_1', 'shar2_1']].sum(axis=1)
    df.loc[:, ['attr2_1', 'sinc2_1', 'intel2_1', 'fun2_1', 'amb2_1', 'shar2_1']] =\
    (df.loc[:, ['attr2_1', 'sinc2_1', 'intel2_1', 'fun2_1', 'amb2_1', 'shar2_1']].T / 
     df.loc[:, 'temp_totalsum'].T).T * 100
    df = df.drop(['temp_totalsum'], axis=1)
    
    for i in [4, 5]:
        feat = ['attr{}_1'.format(i), 'sinc{}_1'.format(i), 
                'intel{}_1'.format(i), 'fun{}_1'.format(i), 
                'amb{}_1'.format(i), 'shar{}_1'.format(i)]

        if i != 4:
            feat.remove('shar{}_1'.format(i))
    
        df = df.drop(feat, axis=1)
    
    df = df.drop(['wave'], axis=1)
    df = df.dropna()
    return df

"""Скачайте датасет, обработайте данные, как показано на семинаре или своим собственным способом. Обучите дерево классифкации. В качестве таргета возьмите колонку 'match'. Постарайтесь хорошо обработать признаки, чтобы выбить максимальную точность. Если точность будет близка к случайному гаданию, задание не будет защитано. В качестве метрики можно взять roc-auc. 

"""

df = pd.read_csv('Speed_Dating_Data.csv', encoding='latin1')
df = preprocess_spd_data(df)
target_col = 'match'
assert not df.isna().sum().sum()

df.head(2)

X = df.drop(['match'], axis=1)
y = df.match

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test =  train_test_split(X,y, test_size = 0.3, shuffle=False)
print(X_train.shape, y_train.shape)

"""Разбейте датасет на трейн и валидацию. Подберите на валидации оптимальный критерий  информативности. 
Постройте графики зависимости точности на валидации и трейне от глубины дерева, от минимального числа объектов для сплита. (Т.е должно быть 2 графика, на каждой должны быть 2 кривые - для трейна и валидации)
Какой максимальной точности удалось достигнуть?
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt

# %matplotlib inline
plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (10, 8)

my_clf = MyDecisionTreeClassifier(min_samples_split=2 ,faster = True)
my_clf.fit(X_train.values, y_train.values)

accuracy_score(my_clf.predict(X_test.values), y_test)

logger = pd.DataFrame(columns = ['type', 'accuracy', 'splits', 'depths'])
for splits in range(1, 26):
  for depths in range(1, 26):
    my_clf = MyDecisionTreeClassifier(min_samples_split=splits, max_depth = depths, faster = True)
    my_clf.fit(X_train.values, y_train.values)
    rowTrain = pd.Series(['Train', accuracy_score(my_clf.predict(X_train.values), y_train), splits, depths], index = logger.columns)
    rowValid = pd.Series(['Valid', accuracy_score(my_clf.predict(X_test.values), y_test), splits, depths], index = logger.columns)
    logger = logger.append(rowTrain,ignore_index=True)
    logger =  logger.append(rowValid, ignore_index = True)

trainAccuracy = logger.loc[logger.type == 'Train']
validAccuracy = logger.loc[logger.type == 'Valid']

plt.plot(trainAccuracy.groupby('depths').accuracy.mean())

plt.plot(trainAccuracy.groupby('splits').accuracy.mean().T)

plt.plot(validAccuracy.groupby('depths').accuracy.mean())

plt.plot(validAccuracy.groupby('splits').accuracy.mean())

"""Известным фактом является то, что деревья решений сильно переобучаются при увеличении глубины и просто запоминают трейн. 
Замечаете ли вы такой эффект судя по графикам? Что при этом происходит с качеством на валидации?

## Находим самые важные признаки (2 балла)

По построенному дереву  легко понять, какие признаки лучше всего помогли решить задачу. Часто это бывает нужно  не только  для сокращения размерности в данных, но и для лучшего понимания прикладной задачи. Например, Вы хотите понять, какие признаки стоит еще конструировать -- для этого нужно понимать, какие из текущих лучше всего работают в дереве.

Самый простой метод -- посчитать число сплитов, где использовался данные признак. Это не лучший вариант, так как по признаку который принимает всего 2 значения, но который почти точно разделяет выборку, число сплитов будет очень 1, но при этом признак сам очень хороший. 
В этом задании предлагается для каждого признака считать суммарный gain (в лекции обозначено как Q) при использовании этого признака в сплите. Тогда даже у очень хороших признаков с маленьким число сплитов это значение должно быть довольно высоким.

Реализовать это довольно просто: создаете словарь номер фичи : суммарный гейн и добавляете в нужную фичу каждый раз, когда используете ее при построении дерева.

Добавьте функционал, который определяет значения feature importance. Обучите дерево на датасете Speed Dating Data.
Выведите 10 главных фичей по важности.
"""

features = np.array(df.loc[:, df.columns != 'match'].columns)

features[my_clf.feature_importances_.argsort()]

"""## Фидбек (бесценно)

* Какие аспекты обучения деревьев решений Вам показались непонятными? Какое место стоит дополнительно объяснить?

### Ваш ответ здесь

* Здесь Вы можете оставить отзыв о этой домашней работе или о всем курсе.

### ВАШ ОТЗЫВ ЗДЕСЬ
"""



